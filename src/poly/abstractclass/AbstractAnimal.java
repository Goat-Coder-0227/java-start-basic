package poly.abstractclass;

/*
    // polypractice 패키지 속 소스 코드 참조
    
    다형성 남은 문제
        1. 부모 클래스(Animal)를 생성할 수 있는 문제
            - 개, 고양이, 소가 실제 존재하는 것은 당연, 동물이라는 추상적인 개념이 실제로 존재하는 것은 이상함
            - Animal 클래스는 다형성을 위해서 필요한 것, 직접 인스턴스를 생성해서 사용할 일 없음
            - Animal 클래스에는 아무런 재약 존재하지 않으므로 누군가 Animal 인스턴스를 생성하여 사용할 가능성 존재
            - Animal 클래스의 인스턴스는 작동은 하되, 제대로된 기능을 수행하지는 않음
        2. 부모 클래스(Animal)를 상속 받는 곳(Dog, Cat, Cow ...)에서 sound() 메서드 오버라이딩을 하지 않을 가능성
            - 개발자가 실수로 새로운 동물 클래스를 생성 후 sound()메서드를 오버라이딩 하지 않을 가능성 존재
            - 오버라이딩 하지 않을 시 부모의 기능을 상속받게 되고 부모에 있는 Animal.sound()가 호출됨
        ==> 좋은 프로그램은 제약이 있는 프로그램, 추상 클래스와 추상 메서드 사용 시 위의 문제 해결 가능
        
    추상 클래스(Abstract Class)
        - 부모 클래스는 제공하되, 실제 생성되면 안되는 클래스
        - 이름 그대로 추상적인 개념을 제공하는 클래스
        - 실체인 인스턴스가 존재하지 않고 상속을 목적으로 사용되고 부모 클래스 역할을 담당
        - 기존 클래스와 완전히 같지만, new를 통하여 직접 인스턴스를 생성하지 못하는 제약이 추가된 것
        
    추상 클래스 사용법
        - 클래스 선언 시 앞에 추상이라는 의미의 'abstract' 키워드를 붙임
            ex) abstract class AbstractClass {...}
            
    추상 메서드(Abstract Method)
        - 부모 클래스를 상속 받는 자식 클래스가 반드시 오버라이딩 해야 하는 메서드
        - 이름 그대로 추상적인 개념을 제공하는 메서드
        - 실체가 존재하지 않고, 메서드 바디가 존재하지 않음
        - 기존 메서드와 완전히 같지만, 메서드 바디가 없고 자식 클래스가 반드시 오버라이딩 해야한다는 제약이 추가된 것
        
    추상 메서드 사용법
        - 추상 메서드 선언 시 메서드 앞에 추상이라는 의미의 'abstract' 키워드를 붙임
            ex) public abstract void sound();
        - 추상 메서드가 하나라도 존재하는 클래스는 반드시 추상 클래스로 선언해야 함
        - 추상 메서드는 상속 받는 자식 클래스가 반드시 오버라이딩 해서 사용해야 함
        - 오버라이딩하지 않고 상속만 받을 시 자식도 추상 클래스가 되어야 함
 */

// 추상 클래스 - 인스턴스 생성 불가
public abstract class AbstractAnimal {
    // 추상메서드 - 자식 클래스가 반드시 오버라이딩
    public abstract void sound();

    // 메서드 - 자식 클래스가 오버라이딩 하지 않아도 됨
    public void move(){
        System.out.println("동물이 움직입니다.");
    }
}
