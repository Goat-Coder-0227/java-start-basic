package poly.interface1;

/*
    인터페이스(Interface)
        - 자바는 순수 추상 클래스를 더 편리하게 사용 가능한 인터페이스라는 개념 제공
        - 순수 추상 클래스와 같지만 약간의 편의 기능이 추가된 것
        - 모든 메서드는 public abstract, 모든 멤버 변수는 public static final을 포함되었다고 간주
        - 인터페이스는 상속이라고 하지 않고 구현이라고 함

    인터페이스 사용법
        - 인터페이스 선언 시 클래스 앞에 'interface' 키워드를 붙임
            ex) interface Interface {...}
        - 인터페이스 상속 받을 시 'extends' 키워드 대신에 'implements'라는 구현이라는 의미를 가진 키워드 사용
            ex) public class ChildClass implements Interface {...}
        - 인터페이스로 다중 상속(다중 구현) 받을 시 ','로 여러 인터페이스를 구분하여 사용
            ex) public class ChildClass implements InterfaceA, InterfaceB {...}
            
    인터페이스 특징
        - 인스턴스 생성 불가
        - 상속 시 모든 메서드를 오버라이딩
        - 주로 다형성을 위해 사용
        - 인터페이스의 모든 메서드는 public abstract
        - 메서드에 public abstract 생략 가능, 생략이 권장됨
        - 인터페이스의 모든 멤버 변수는 public static final
        - 멤버 변수에 public static final 생략 가능, 생략이 권장됨
        - 다중 구현(다중 상속)을 지원

    클래스, 추상 클래스, 인터페이스는 모두 똑같다
        - 클래스, 추상 클래스, 인터페이스는 프로그램 코드 및 메모리 구조상 모두 동일
        - 모두 자바에서 .class로 다뤄지며 인터페이스를 작성 시 .java.에 인터페이스가 정의됨
        - 인터페이스는 순수 추상 클래스와 비슷하다고 보면됨

    상속 vs 구현
        1. 상속
            - 이름 그대로 부모의 기능을 물려 받는 것이 목적
        2. 구현
            - 상속과는 다르게 부모로부터 물려 받을 수 있는 기능이 존재하지 않음 (모든 메서드는 추상 메서드)
            - 자식이 모든 메서드를 오버라이딩 해서 기능을 구현해야함
            - 인터페이스는 메서드명만 존재하는 설계도, 이 설계도의 실제 작동은 오로지 하위 클래스에서 구현해야할 몫
        ==> 상속과 구현은 사람이 표현하는 단어만 상이, 자바 입장에서는 일반 상속 구조와 동일하게 작동
        
    순수 추상 클래스가 아닌, 인터페이스를 사용해야 하는 이유
        1. 제약
            - 인터페이스를 구현하는 곳, 즉 하위 클래스에게 인터페이스의 메서드를 반드시 구현하라는 규제(제약)을 줌
            - 인터페이스의 규약(제약)은 개발자가 반드시 구현해야 하는 것임을 알림
            - 순수 추상 클래스의 경우 추후에 누군가 실행 가능한 메서드나 실행 로직을 끼워 넣을 가능성 존재
            - 순수 추상 클래스에 있는 실행 로직 혹은 실행 가능한 메서드를 자식 클래스에서 구현하지 않을 가능성 존재
            - 인터페이스는 모든 메서드가 추상 메서드이므로 순수 추상 클래스에 있는 문제들을 원천적으로 차단
        2. 다중 구현
            - 자바에서 클래스의 상속은 오로지 단일 상속, 즉 부모를 하나만 지정 가능
            - 인터페이스는 다중 구현(다중 상속), 즉 부모를 여러명 지정 가능
        ==> 좋은 프로그램은 무한한 자유가 있는 프로그램이 아닌 어느정도의 제약이 있는 프로그램!!
 */

public interface InterfaceAnimal {
    void sound(); // public abstract
    void move();  // public abstract
}
