package extends1.overriding;

/*
    메서드 오버라이딩(Overriding)
        - 부모에게서 상속 받은 기능을 자식이 재정의 하는 것

    @Override
        - '@'이 붙은 부분을 애노테이션(Annotation), 프로그램이 읽을 수 있는 특별한 주석
        - @Override : 상위 클래스의 메서드를 오버라이드하는 것임을 나타냄
        - 애노테이션은 필수는 아니지만 코드의 명확성을 위해 사용하는 것을 권장

    오버라이딩과 메모리 구조
        1. electricCar.move()를 호출한다.
        2. 호출한 electricCar의 타입은 ElectricCar이므로 인스턴스 내부의 ElectricCar 타입에서 찾기 시작한다.
        3. ElectricCar 타입에 move() 메서드가 존재하므로 해당 메서드를 실행, 이때 실행할 메서드를 이미 찾았기에 더이상 부모 타입에서 찾지 않는다.
        
    오버로딩(Overloading)과 오버라이딩(Overriding)
        1. 메서드 오버로딩
            - 메서드 이름이 같고 매개변수(파라미터)가 다른 메서드를 여러개 정의 하는 것
            - 오버로딩 번역 시 '과적' 즉 과하게 물건을 담았다는 뜻
            - 같은 이름의 메서드를 과적해서 여러개 정의 했다고 이해
        2. 메서드 오버라이딩
            - 하위(자식) 클래스에서 상위(부모) 클래스의 메서드를 재정의하는 과정으로써 상속 관계에서 사용
            - 오버라이딩 단순히 해석 시 '무언가를 넘어서 타는 것'
            - 자식이 부모의 기존 기능을 넘어 타서 기존 기능을 새로운 기능으로 덮어버린다고 이해
            
    메서드 오버라이딩 조건
        1. 메서드 이름
            - 메서드 이름이 같아야 함
        2. 메서드 매개변수(파라미터)
            - 매개변수(파라미터) 타입, 순서, 개수가 같아야 함
        3. 반환 타입
            - 반환 타입이 같아야 함 단 반환 타입이 하위 클래스일 수 있음
        4. 접근 제어자
            - 상위 클래스의 메서드보다 더 제한적이어서는 안됨 ( 상위 클래스 접근 제어자 <= 하위 클래스 접근 제어자)
        5. 예외
            - 상위 클래스의 메서드보다 더 많은 체크 예외를 throws로 선언 가능
            - 더 적거나 같은 수의 예외, 또는 하위 타입의 예외는 선언 가능
        6. static, final, private 메서드는 오버라이딩 불가능
            - static은 클래스 레벨이므로 인스턴스 레벨에서는 오버라이딩이 의미 없음
            - final은 '최후의, 마지막' 이라는 뜻이므로 메서드 재정의를 금지함
            - private는 해당 클래스 내에서만 접근 가능하므로 하위 클래스에서는 보이지 않음(접근 불가능)
        7. 생성자
            - 생성자는 오버라이딩 할 수 없음

    메서드에 final
        - 오버라이딩 끝!
        - final로 선언된 메서드는 오버라이드 될 수 없음 즉 상속받은 서브 클래스에서 이 메서드를 변경 불가능
            ex) public final void myFinalMethod() {...}
 */

public class ElectricCar extends Car {
    @Override
    public void move() {
        /*
            이제 ElectricCar의 move()를 호출 시 Car의 move()가 아닌 ElectricCar의 move()가 호출됨
         */
        System.out.println("전기차를 빠르게 이동합니다.");
    }

    public void charge() {
        System.out.println("충전합니다.");
    }
}
